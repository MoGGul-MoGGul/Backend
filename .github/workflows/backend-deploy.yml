name: MogulMogul Backend CI/CD

on:
  push:
    branches: [ "main", "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application.properties
        run: |
          PROPERTIES_PATH="./src/main/resources/application.properties"
          echo "spring.datasource.url=jdbc:postgresql://${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}" > $PROPERTIES_PATH
          echo "spring.datasource.username=${{ secrets.RDS_USERNAME }}" >> $PROPERTIES_PATH
          echo "spring.datasource.password=${{ secrets.RDS_PASSWORD }}" >> $PROPERTIES_PATH
          echo "spring.datasource.driver-class-name=org.postgresql.Driver" >> $PROPERTIES_PATH
          echo "spring.jpa.hibernate.ddl-auto=validate" >> $PROPERTIES_PATH
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect" >> $PROPERTIES_PATH
          echo "spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Seoul" >> $PROPERTIES_PATH
          echo "jwt.secret=${{ secrets.JWT_SECRET_KEY }}" >> $PROPERTIES_PATH
          echo "spring.data.redis.host=${{ secrets.REDIS_HOST }}" >> $PROPERTIES_PATH
          echo "spring.data.redis.port=${{ secrets.REDIS_PORT }}" >> $PROPERTIES_PATH
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $PROPERTIES_PATH
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $PROPERTIES_PATH
          echo "cloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET_NAME }}" >> $PROPERTIES_PATH
          echo "cloud.aws.region.static=ap-northeast-2" >> $PROPERTIES_PATH
          echo "cloud.aws.stack.auto=false" >> $PROPERTIES_PATH

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: List and rename JAR file
        run: |
          ls -la build/libs/
          # 두 개의 JAR 파일 중 '-plain'이 없는 실행 가능한 JAR 파일만 골라서 이름을 변경합니다.
          mv $(ls build/libs/*.jar | grep -v plain) build/libs/app.jar

      - name: Stop existing server on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            bash -ic "
              echo '--- Attempting to stop any running server ---'
              # Stop the process. || true ensures this step doesn't fail if the process isn't running.
              pkill -f 'app.jar' || true
              echo '--- Stop command sent ---'
            "

      - name: Clean deployment directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            bash -ic "
              echo '--- Cleaning up deployment directory ---'
              rm -rf /home/ubuntu/app/backend
              mkdir -p /home/ubuntu/app/backend
              echo '--- Directory cleaned and recreated ---'
            "

      - name: SCP to transfer file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/app.jar"
          target: "/home/ubuntu/app/backend/"
          strip_components: 2

      - name: Verify file transfer on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            bash -ic "
              echo '--- Verifying file transfer ---'
              ls -l /home/ubuntu/app/backend
            "

      - name: Start server on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            bash -ic "
              echo '--- Starting new process on EC2 ---'
              cd /home/ubuntu/app/backend
              nohup java -jar app.jar > backend.log 2>&1 &
              echo '--- Server start command executed ---'
            "
# SCP 액션에서 strip_components 옵션을 2로 설정하여 디렉토리 구조를 제거