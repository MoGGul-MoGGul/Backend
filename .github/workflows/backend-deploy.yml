# Spring Boot 프로젝트 저장소의 .github/workflows/backend-deploy.yml

name: MogulMogul Backend CI/CD

on:
  push:
    branches: [ "main", "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application.properties
        run: |
          PROPERTIES_PATH="./src/main/resources/application.properties"
          echo "spring.datasource.url=jdbc:postgresql://${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}" > $PROPERTIES_PATH
          echo "spring.datasource.username=${{ secrets.RDS_USERNAME }}" >> $PROPERTIES_PATH
          echo "spring.datasource.password=${{ secrets.RDS_PASSWORD }}" >> $PROPERTIES_PATH
          echo "spring.datasource.driver-class-name=org.postgresql.Driver" >> $PROPERTIES_PATH
          echo "spring.jpa.hibernate.ddl-auto=validate" >> $PROPERTIES_PATH
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect" >> $PROPERTIES_PATH
          echo "spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Seoul" >> $PROPERTIES_PATH
          echo "jwt.secret=${{ secrets.JWT_SECRET_KEY }}" >> $PROPERTIES_PATH
          echo "spring.data.redis.host=${{ secrets.REDIS_HOST }}" >> $PROPERTIES_PATH
          echo "spring.data.redis.port=${{ secrets.REDIS_PORT }}" >> $PROPERTIES_PATH
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $PROPERTIES_PATH
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $PROPERTIES_PATH
          echo "cloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET_NAME }}" >> $PROPERTIES_PATH
          echo "cloud.aws.region.static=ap-northeast-2" >> $PROPERTIES_PATH
          echo "cloud.aws.stack.auto=false" >> $PROPERTIES_PATH

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      # --- ❗ 여기가 수정된 부분입니다 ---
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. 원격 서버에 타겟 디렉토리가 없으면 생성합니다.
            mkdir -p /home/ubuntu/app/backend
            
            # 2. 기존에 실행중인 Spring Boot 프로세스가 있으면 종료합니다.
            # pgrep으로 프로세스 ID를 찾고, 있으면 kill 명령어로 종료합니다.
            PID=$(pgrep -f "momo_backend")
            if [ -n "$PID" ]; then
              echo "Stopping existing Spring Boot process: $PID"
              kill -15 $PID
              sleep 5
            fi
            
            # 3. 이전에 배포된 파일들을 삭제합니다. (폴더는 유지)
            rm -rf /home/ubuntu/app/backend/*.jar

      # --- ❗ 여기가 수정된 부분입니다 ---
      - name: SCP to transfer file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*.jar" # 경로에서 ./ 제거
          target: "/home/ubuntu/app/backend"

      # --- ❗ 여기가 수정된 부분입니다 ---
      - name: Execute remote commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 4. 백그라운드에서 Spring Boot 애플리케이션을 실행합니다.
            # nohup을 사용하여 SSH 세션이 끊겨도 프로세스가 계속 실행되도록 합니다.
            # 로그는 backend.log 파일에 저장됩니다.
            cd /home/ubuntu/app/backend
            nohup java -jar *.jar > backend.log 2>&1 &