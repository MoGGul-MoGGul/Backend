# 워크플로우 이름 설정
name: Backend Deploy CI/CD

# 워크플로우가 실행될 조건 설정 (main 브랜치에 push될 때)
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # 실행 환경 설정
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # 2. JDK 11 설치
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 프로젝트 빌드
      #    -x test 옵션으로 빌드 시 테스트를 스킵합니다.
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. 빌드된 JAR 파일을 EC2로 전송
      - name: Transfer JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          source: "build/libs/*.jar"  # 빌드된 JAR 파일 경로
          target: "/home/ubuntu/app"   # EC2 인스턴스의 배포 디렉토리

      # 6. EC2에 접속하여 배포 스크립트 실행
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            echo "--- Starting deployment on EC2 ---"
            
            # 8080 포트를 사용하고 있는 기존 프로세스 종료
            sudo fuser -k 8080/tcp || true
            echo "--- Killed existing process on port 8080 ---"
            
            # 배포 디렉토리로 이동
            cd /home/ubuntu/app
            echo "--- Changed directory to /home/ubuntu/app ---"
            
            # 백그라운드에서 새로운 애플리케이션 실행
            # 실행 로그는 logfile.log에 저장하여 추후 디버깅에 사용
            nohup java -jar *.jar > logfile.log 2>&1 &
            echo "--- Application started successfully ---"
