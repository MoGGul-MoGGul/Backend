# .github/workflows/backend-deploy.yml

name: MogulMogul Backend CI/CD

on:
  push:
    branches: [ "main", "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application.properties
        run: |
          PROPERTIES_PATH="./src/main/resources/application.properties"
          echo "spring.datasource.url=jdbc:postgresql://${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}" > $PROPERTIES_PATH
          echo "spring.datasource.username=${{ secrets.RDS_USERNAME }}" >> $PROPERTIES_PATH
          echo "spring.datasource.password=${{ secrets.RDS_PASSWORD }}" >> $PROPERTIES_PATH
          echo "spring.datasource.driver-class-name=org.postgresql.Driver" >> $PROPERTIES_PATH
          echo "spring.jpa.hibernate.ddl-auto=validate" >> $PROPERTIES_PATH
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect" >> $PROPERTIES_PATH
          echo "spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Seoul" >> $PROPERTIES_PATH
          echo "jwt.secret=${{ secrets.JWT_SECRET_KEY }}" >> $PROPERTIES_PATH
          echo "spring.data.redis.host=${{ secrets.REDIS_HOST }}" >> $PROPERTIES_PATH
          echo "spring.data.redis.port=${{ secrets.REDIS_PORT }}" >> $PROPERTIES_PATH
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $PROPERTIES_PATH
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $PROPERTIES_PATH
          echo "cloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET_NAME }}" >> $PROPERTIES_PATH
          echo "cloud.aws.region.static=ap-northeast-2" >> $PROPERTIES_PATH
          echo "cloud.aws.stack.auto=false" >> $PROPERTIES_PATH

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      # --- ❗ 여기가 수정된 부분입니다 ---
      - name: Clean up EC2 before deploying
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "--- Starting cleanup on EC2 ---"
            # pkill 명령어로 JAR 파일을 실행하는 Java 프로세스를 찾아 종료합니다.
            # 프로세스가 없어도 오류가 발생하지 않고 메시지를 출력합니다.
            pkill -f 'momo_backend.*\.jar' && echo "Stopped existing process." || echo "No process to stop."
            
            # 이전 JAR 파일을 삭제합니다. 파일이 없어도 오류가 발생하지 않습니다.
            rm -f /home/ubuntu/app/backend/*.jar
            echo "--- Cleanup finished ---"

      - name: SCP to transfer file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/home/ubuntu/app/backend"

      - name: Start server on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "--- Starting new process on EC2 ---"
            cd /home/ubuntu/app/backend
            # nohup으로 백그라운드에서 서버를 실행하고 로그를 backend.log에 저장합니다.
            nohup java -jar *.jar > backend.log 2>&1 &
            echo "--- Server start command executed ---"